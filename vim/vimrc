execute pathogen#infect()

" Most of these customizations are stolen from Gary Bernhardt's excellent
" setup:
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
set nocompatible
" Allow background buffers
set hidden
set showmatch
set hlsearch
set ignorecase smartcase
set switchbuf=useopen
set showtabline=2
set winwidth=80
set scrolloff=3
set nobackup
set nowritebackup
" No more swp files in current directory!
set directory=~/.vim-tmp,~/tmp,/var/tmp,/tmp
set showcmd
set cursorline
set background=dark
colorscheme lighttable

" Disable new regexp engine on ruby code
au BufNewFile,BufRead *.rb set re=1
syntax on
filetype plugin indent on

set foldmethod=manual
set nofoldenable
set nojoinspaces
set autoread
" Make tab completion more sane when navigating files
set wildmode=longest,list,full
set wildmenu

" Disable folding in markdown plugin
let g:vim_markdown_folding_disabled = 1

" Enable italics on the mac
if has('macunix') || system('uname -o') =~?'^darwin'
    set t_ZH=[3m t_ZR=[23m "Set the italics code
endif

" Gimme line numbers, both absolute and relative!
set relativenumber
set number

let mapleader = ","
let maplocalleader = "\\"

" Heatseeker integration (https://github.com/rschmitt/heatseeker)
function! HeatseekerCommand(choice_command, hs_args, first_command, rest_command)
    try
        let selections = system(a:choice_command . " | hs " . a:hs_args)
    catch /Vim:Interrupt/
        redraw!
        return
    endtry
    redraw!
    let first = 1
    for selection in split(selections, "\n")
        if first
            exec a:first_command . " " . selection
            let first = 0
        else
            exec a:rest_command . " " . selection
        endif
    endfor
endfunction

if has('win32')
    nnoremap <leader>f :call HeatseekerCommand("dir /a-d /s /b", "", ':e', ':tabe')<CR>
else
    nnoremap <leader>f :call HeatseekerCommand("find . ! -path '*/.git/*' -type f -follow", "", ':e', ':tabe')<cr>
endif

" Using leader w for save is easier to type for me
nnoremap <leader>w :w<cr>
" Use leader leader to quickly switch between alternates
nnoremap <leader><leader> <C-^>
" Assuming I'm on a mac here
function! ToClipboard() range
    echo system('echo '.shellescape(join(getline(a:firstline, a:lastline), "\n")).'| pbcopy')
endfunction
vnoremap <leader>y :'<,'>call ToClipboard()<cr>

" leader h clears highlighting
nnoremap <leader>h :noh<cr>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Lets disable arrow keys for a while to see how comfortable i can get with
" hjkl
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" TODO: This was stolen from the internet and works ok, but it'd be nicer if it
" worked with vim-surround
" modify selected text using combining diacritics
command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')

function! s:CombineSelection(line1, line2, cp)
  execute 'let char = "\u'.a:cp.'"'
  execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
endfunction

function! RunRubyTest(file_path, extra_args)
  let l:cmd_to_run = "ruby -Ilib:test " . a:file_path . " " . a:extra_args
  let s:last_ruby_test_cmd = l:cmd_to_run
  exe "!echo '+ " . l:cmd_to_run . "' && " l:cmd_to_run
endfunction

function! RunLastRubyTest()
  if !defined("s:last_ruby_test_cmd")
    echom "No last run ruby test command."
    return 0
  endif
  exe "!echo '+ " . s:last_ruby_test_cmd . "' && " s:last_ruby_test_cmd
endfunction

" Attempt to find the current test name via a not-very-smart regex. Returns the
" test name (or crashes horribly if it fails)
function! MatchRubyTestAtCursor()
  " Save location
  let l:start_view = winsaveview()
  " Search for the nearest test function name
  execute "normal! ?\\Wdef\\s\\+test_[A-Za-z0-9_!?=]\\+\r:nohlsearch\r"
  " Before capturing result to j register, save any existing value
  let l:last_reg = @j
  " Move cursor to the actual function name and yank to j register
  normal! wwve"jy
  " Read from "j", then restore it to previous value
  let l:test_name = @j
  let @j = l:last_reg
  " Reset the window view, and return the name
  call winrestview(l:start_view)
  return l:test_name
endfunction

" Find the ruby test at the cursor and run it
function! RunRubyTestAtCursor()
  let l:test_name = MatchRubyTestAtCursor()
  call RunRubyTest(shellescape(expand("%:p")), "--name '" . l:test_name . "'")
endfunction

" Try to find the ruby test at the cursor; if the file is not a ruby test file,
" instead run the last test.
function! RunRubyTestAtCursorOrLastTest()
  if match(expand("%:t"), "test.*\.rb") != -1
    " Looks like a test file! Let's call run test at cursor
    return RunRubyTestAtCursor()
  endif
  return RunLastRubyTest()
endfunction

" Run all ruby tests in current file
function! RunAllRubyTests()
  call RunRubyTest(shellescape(expand("%:p")), "")
endfunction

nnoremap <leader>ta :call RunAllRubyTests()<cr>
nnoremap <leader>tc :call RunTestAtCursor()<cr>
nnoremap <leader>tt :call RunRubyTestAtCursorOrLastTest()<cr>
